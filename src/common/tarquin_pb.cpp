// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tarquin_pb.hpp"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sln {

namespace {

const ::google::protobuf::Descriptor* results_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  results_reflection_ = NULL;
const ::google::protobuf::Descriptor* fid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fid_reflection_ = NULL;
const ::google::protobuf::Descriptor* coord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  coord_reflection_ = NULL;
const ::google::protobuf::Descriptor* comp_point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  comp_point_reflection_ = NULL;
const ::google::protobuf::Descriptor* comp_vec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  comp_vec_reflection_ = NULL;
const ::google::protobuf::Descriptor* comp_mat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  comp_mat_reflection_ = NULL;
const ::google::protobuf::Descriptor* vec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vec_reflection_ = NULL;
const ::google::protobuf::Descriptor* signal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  signal_reflection_ = NULL;
const ::google::protobuf::Descriptor* basis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  basis_reflection_ = NULL;
const ::google::protobuf::Descriptor* options_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  options_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* options_fidformat_descriptor_ = NULL;
const ::google::protobuf::Descriptor* constraints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  constraints_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tarquin_2eproto() {
  protobuf_AddDesc_tarquin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tarquin.proto");
  GOOGLE_CHECK(file != NULL);
  results_descriptor_ = file->message_type(0);
  static const int results_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(results, fidraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(results, fidproc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(results, fidwater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(results, basis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(results, options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(results, yhat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(results, amplitudes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(results, matgroups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(results, matbasis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(results, lm_opts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(results, lm_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(results, norm_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(results, crlbs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(results, q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(results, amp_norm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(results, crlbs_norm_),
  };
  results_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      results_descriptor_,
      results::default_instance_,
      results_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(results, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(results, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(results));
  fid_descriptor_ = file->message_type(1);
  static const int fid_offsets_[35] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, strfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, fs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, bsamplingfrequencyknown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, ft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, btransmitterfrequencyknown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, strsequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, pulsesequenceknown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, naverages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, baveragesknown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, phi0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, bzeroorderphaseknown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, phi1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, bfirstorderphaseknown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, breferenceknown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, tau_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, bechoknown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, snr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, bsnrknown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, npoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, fids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, norm_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, slices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, voxel_dim_known_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, voxel_dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, voi_dim_known_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, voi_dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, pos_known_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, row_dirn_known_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, row_dirn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, col_dirn_known_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, col_dirn_),
  };
  fid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fid_descriptor_,
      fid::default_instance_,
      fid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fid));
  coord_descriptor_ = file->message_type(2);
  static const int coord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(coord, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(coord, col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(coord, slice_),
  };
  coord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      coord_descriptor_,
      coord::default_instance_,
      coord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(coord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(coord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(coord));
  comp_point_descriptor_ = file->message_type(3);
  static const int comp_point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comp_point, real_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comp_point, imag_),
  };
  comp_point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      comp_point_descriptor_,
      comp_point::default_instance_,
      comp_point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comp_point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comp_point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(comp_point));
  comp_vec_descriptor_ = file->message_type(4);
  static const int comp_vec_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comp_vec, comp_point_),
  };
  comp_vec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      comp_vec_descriptor_,
      comp_vec::default_instance_,
      comp_vec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comp_vec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comp_vec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(comp_vec));
  comp_mat_descriptor_ = file->message_type(5);
  static const int comp_mat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comp_mat, comp_vec_),
  };
  comp_mat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      comp_mat_descriptor_,
      comp_mat::default_instance_,
      comp_mat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comp_mat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comp_mat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(comp_mat));
  vec_descriptor_ = file->message_type(6);
  static const int vec_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vec, point_),
  };
  vec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vec_descriptor_,
      vec::default_instance_,
      vec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vec));
  signal_descriptor_ = file->message_type(7);
  static const int signal_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signal, fid_vec_),
  };
  signal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      signal_descriptor_,
      signal::default_instance_,
      signal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(signal));
  basis_descriptor_ = file->message_type(8);
  static const int basis_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basis, strbasispath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basis, vecsignalfiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basis, signals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basis, broad_sig_),
  };
  basis_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      basis_descriptor_,
      basis::default_instance_,
      basis_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basis, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(basis, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(basis));
  options_descriptor_ = file->message_type(9);
  static const int options_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, strbasispath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, buseprecompiled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, nstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, nend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, phi0_lower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, phi0_upper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, phi0_typ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, phi1_lower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, phi1_upper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, phi1_typ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, cons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, stroutputxmlpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, strfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, strfilewater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, strfileoutimag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, strfileouttxt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, strfileoutcsv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, conv_window_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, water_window_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, bautophase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, bautoref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, bshowpreprocessed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, ref_spec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, fit_list_),
  };
  options_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      options_descriptor_,
      options::default_instance_,
      options_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(options, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(options));
  options_fidformat_descriptor_ = options_descriptor_->enum_type(0);
  constraints_descriptor_ = file->message_type(10);
  static const int constraints_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(constraints, minalpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(constraints, maxalpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(constraints, typalpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(constraints, minbeta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(constraints, maxbeta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(constraints, typbeta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(constraints, minshifthz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(constraints, maxshifthz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(constraints, typshifthz_),
  };
  constraints_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      constraints_descriptor_,
      constraints::default_instance_,
      constraints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(constraints, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(constraints, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(constraints));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tarquin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    results_descriptor_, &results::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fid_descriptor_, &fid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    coord_descriptor_, &coord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    comp_point_descriptor_, &comp_point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    comp_vec_descriptor_, &comp_vec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    comp_mat_descriptor_, &comp_mat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vec_descriptor_, &vec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    signal_descriptor_, &signal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    basis_descriptor_, &basis::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    options_descriptor_, &options::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    constraints_descriptor_, &constraints::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tarquin_2eproto() {
  delete results::default_instance_;
  delete results_reflection_;
  delete fid::default_instance_;
  delete fid_reflection_;
  delete coord::default_instance_;
  delete coord_reflection_;
  delete comp_point::default_instance_;
  delete comp_point_reflection_;
  delete comp_vec::default_instance_;
  delete comp_vec_reflection_;
  delete comp_mat::default_instance_;
  delete comp_mat_reflection_;
  delete vec::default_instance_;
  delete vec_reflection_;
  delete signal::default_instance_;
  delete signal_reflection_;
  delete basis::default_instance_;
  delete basis_reflection_;
  delete options::default_instance_;
  delete options_reflection_;
  delete constraints::default_instance_;
  delete constraints_reflection_;
}

void protobuf_AddDesc_tarquin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rtarquin.proto\022\003sln\"\256\003\n\007results\022\030\n\006fidr"
    "aw\030\001 \001(\0132\010.sln.fid\022\031\n\007fidproc\030\002 \001(\0132\010.sl"
    "n.fid\022\032\n\010fidwater\030\003 \001(\0132\010.sln.fid\022\031\n\005bas"
    "is\030\004 \001(\0132\n.sln.basis\022\035\n\007options\030\005 \001(\0132\014."
    "sln.options\022\033\n\004yhat\030\006 \003(\0132\r.sln.comp_vec"
    "\022\034\n\namplitudes\030\007 \003(\0132\010.sln.vec\022 \n\tmatgro"
    "ups\030\010 \003(\0132\r.sln.comp_mat\022\037\n\010matbasis\030\t \003"
    "(\0132\r.sln.comp_mat\022\017\n\007lm_opts\030\n \003(\001\022\031\n\007lm"
    "_info\030\013 \003(\0132\010.sln.vec\022\020\n\010norm_val\030\014 \003(\001\022"
    "\027\n\005crlbs\030\r \003(\0132\010.sln.vec\022\t\n\001q\030\016 \003(\001\022\032\n\010a"
    "mp_norm\030\017 \003(\0132\010.sln.vec\022\034\n\ncrlbs_norm\030\020 "
    "\003(\0132\010.sln.vec\"\307\005\n\003fid\022\023\n\013strfilename\030\001 \001"
    "(\t\022\n\n\002fs\030\002 \001(\001\022\037\n\027bsamplingfrequencyknow"
    "n\030\003 \001(\010\022\n\n\002ft\030\004 \001(\001\022\"\n\032btransmitterfrequ"
    "encyknown\030\005 \001(\010\022\023\n\013strsequence\030\006 \001(\t\022\032\n\022"
    "pulsesequenceknown\030\007 \001(\010\022\021\n\tnaverages\030\010 "
    "\001(\005\022\026\n\016baveragesknown\030\t \001(\010\022\014\n\004phi0\030\n \003("
    "\001\022\034\n\024bzeroorderphaseknown\030\013 \003(\010\022\014\n\004phi1\030"
    "\014 \003(\001\022\035\n\025bfirstorderphaseknown\030\r \003(\010\022\013\n\003"
    "ref\030\016 \003(\001\022\027\n\017breferenceknown\030\017 \003(\010\022\013\n\003ta"
    "u\030\020 \001(\001\022\022\n\nbechoknown\030\021 \001(\010\022\013\n\003snr\030\022 \003(\001"
    "\022\021\n\tbsnrknown\030\023 \003(\010\022\017\n\007npoints\030\024 \001(\005\022\033\n\004"
    "fids\030\025 \003(\0132\r.sln.comp_vec\022\020\n\010norm_val\030\026 "
    "\001(\001\022\014\n\004rows\030\027 \001(\005\022\014\n\004cols\030\030 \001(\005\022\016\n\006slice"
    "s\030\031 \001(\005\022\027\n\017voxel_dim_known\030\032 \001(\010\022\021\n\tvoxe"
    "l_dim\030\033 \003(\001\022\025\n\rvoi_dim_known\030\034 \001(\010\022\017\n\007vo"
    "i_dim\030\035 \003(\001\022\021\n\tpos_known\030\036 \001(\010\022\013\n\003pos\030\037 "
    "\003(\001\022\026\n\016row_dirn_known\030  \001(\010\022\020\n\010row_dirn\030"
    "! \003(\001\022\026\n\016col_dirn_known\030\" \001(\010\022\020\n\010col_dir"
    "n\030# \003(\001\"0\n\005coord\022\013\n\003row\030\001 \001(\005\022\013\n\003col\030\002 \001"
    "(\005\022\r\n\005slice\030\003 \001(\005\"(\n\ncomp_point\022\014\n\004real\030"
    "\001 \001(\001\022\014\n\004imag\030\002 \001(\001\"/\n\010comp_vec\022#\n\ncomp_"
    "point\030\001 \003(\0132\017.sln.comp_point\"+\n\010comp_mat"
    "\022\037\n\010comp_vec\030\001 \003(\0132\r.sln.comp_vec\"\024\n\003vec"
    "\022\r\n\005point\030\001 \003(\001\"#\n\006signal\022\031\n\007fid_vec\030\001 \003"
    "(\0132\010.sln.fid\"f\n\005basis\022\024\n\014strbasispath\030\001 "
    "\001(\t\022\026\n\016vecsignalfiles\030\002 \003(\t\022\034\n\007signals\030\003"
    " \003(\0132\013.sln.signal\022\021\n\tbroad_sig\030\004 \003(\010\"\354\005\n"
    "\007options\022&\n\006format\030\001 \001(\0162\026.sln.options.f"
    "idformat\022\024\n\014strbasispath\030\002 \001(\t\022\027\n\017busepr"
    "ecompiled\030\003 \001(\010\022\016\n\006nstart\030\004 \001(\005\022\014\n\004nend\030"
    "\005 \001(\005\022\022\n\nphi0_lower\030\006 \001(\001\022\022\n\nphi0_upper\030"
    "\007 \001(\001\022\020\n\010phi0_typ\030\010 \001(\001\022\022\n\nphi1_lower\030\t "
    "\001(\001\022\022\n\nphi1_upper\030\n \001(\001\022\020\n\010phi1_typ\030\013 \001("
    "\001\022\036\n\004cons\030\014 \003(\0132\020.sln.constraints\022\030\n\020str"
    "outputxmlpath\030\r \001(\t\022\017\n\007strfile\030\016 \001(\t\022\024\n\014"
    "strfilewater\030\017 \001(\t\022\026\n\016strfileoutimag\030\020 \001"
    "(\t\022\025\n\rstrfileouttxt\030\021 \001(\t\022\025\n\rstrfileoutc"
    "sv\030\022 \001(\t\022\031\n\021conv_window_width\030\023 \001(\005\022\024\n\014w"
    "ater_window\030\024 \001(\005\022\022\n\nbautophase\030\025 \001(\010\022\020\n"
    "\010bautoref\030\026 \001(\010\022\031\n\021bShowPreprocessed\030\027 \001"
    "(\010\022\013\n\003ref\030\030 \001(\001\022\020\n\010ref_spec\030\031 \001(\001\022\034\n\010fit"
    "_list\030\032 \003(\0132\n.sln.coord\"\241\001\n\tfidformat\022\n\n"
    "\006DANGER\020\000\022\013\n\007SIEMENS\020\001\022\013\n\007PHILIPS\020\002\022\006\n\002G"
    "E\020\003\022\007\n\003RDA\020\004\022\007\n\003LCM\020\005\022\007\n\003SHF\020\006\022\n\n\006VARIAN"
    "\020\007\022\n\n\006BRUKER\020\010\022\007\n\003DCM\020\t\022\017\n\013PHILIPS_DCM\020\n"
    "\022\r\n\tJMRUI_TXT\020\013\022\n\n\006NOTSET\020\014\"\262\001\n\013constrai"
    "nts\022\020\n\010minalpha\030\001 \001(\001\022\020\n\010maxalpha\030\002 \001(\001\022"
    "\020\n\010typalpha\030\003 \001(\001\022\017\n\007minbeta\030\004 \001(\001\022\017\n\007ma"
    "xbeta\030\005 \001(\001\022\017\n\007typbeta\030\006 \001(\001\022\022\n\nminshift"
    "hz\030\007 \001(\001\022\022\n\nmaxshifthz\030\010 \001(\001\022\022\n\ntypshift"
    "hz\030\t \001(\001", 2448);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tarquin.proto", &protobuf_RegisterTypes);
  results::default_instance_ = new results();
  fid::default_instance_ = new fid();
  coord::default_instance_ = new coord();
  comp_point::default_instance_ = new comp_point();
  comp_vec::default_instance_ = new comp_vec();
  comp_mat::default_instance_ = new comp_mat();
  vec::default_instance_ = new vec();
  signal::default_instance_ = new signal();
  basis::default_instance_ = new basis();
  options::default_instance_ = new options();
  constraints::default_instance_ = new constraints();
  results::default_instance_->InitAsDefaultInstance();
  fid::default_instance_->InitAsDefaultInstance();
  coord::default_instance_->InitAsDefaultInstance();
  comp_point::default_instance_->InitAsDefaultInstance();
  comp_vec::default_instance_->InitAsDefaultInstance();
  comp_mat::default_instance_->InitAsDefaultInstance();
  vec::default_instance_->InitAsDefaultInstance();
  signal::default_instance_->InitAsDefaultInstance();
  basis::default_instance_->InitAsDefaultInstance();
  options::default_instance_->InitAsDefaultInstance();
  constraints::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tarquin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tarquin_2eproto {
  StaticDescriptorInitializer_tarquin_2eproto() {
    protobuf_AddDesc_tarquin_2eproto();
  }
} static_descriptor_initializer_tarquin_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int results::kFidrawFieldNumber;
const int results::kFidprocFieldNumber;
const int results::kFidwaterFieldNumber;
const int results::kBasisFieldNumber;
const int results::kOptionsFieldNumber;
const int results::kYhatFieldNumber;
const int results::kAmplitudesFieldNumber;
const int results::kMatgroupsFieldNumber;
const int results::kMatbasisFieldNumber;
const int results::kLmOptsFieldNumber;
const int results::kLmInfoFieldNumber;
const int results::kNormValFieldNumber;
const int results::kCrlbsFieldNumber;
const int results::kQFieldNumber;
const int results::kAmpNormFieldNumber;
const int results::kCrlbsNormFieldNumber;
#endif  // !_MSC_VER

results::results()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void results::InitAsDefaultInstance() {
  fidraw_ = const_cast< ::sln::fid*>(&::sln::fid::default_instance());
  fidproc_ = const_cast< ::sln::fid*>(&::sln::fid::default_instance());
  fidwater_ = const_cast< ::sln::fid*>(&::sln::fid::default_instance());
  basis_ = const_cast< ::sln::basis*>(&::sln::basis::default_instance());
  options_ = const_cast< ::sln::options*>(&::sln::options::default_instance());
}

results::results(const results& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void results::SharedCtor() {
  _cached_size_ = 0;
  fidraw_ = NULL;
  fidproc_ = NULL;
  fidwater_ = NULL;
  basis_ = NULL;
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

results::~results() {
  SharedDtor();
}

void results::SharedDtor() {
  if (this != default_instance_) {
    delete fidraw_;
    delete fidproc_;
    delete fidwater_;
    delete basis_;
    delete options_;
  }
}

void results::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* results::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return results_descriptor_;
}

const results& results::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tarquin_2eproto();  return *default_instance_;
}

results* results::default_instance_ = NULL;

results* results::New() const {
  return new results;
}

void results::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (fidraw_ != NULL) fidraw_->::sln::fid::Clear();
    }
    if (_has_bit(1)) {
      if (fidproc_ != NULL) fidproc_->::sln::fid::Clear();
    }
    if (_has_bit(2)) {
      if (fidwater_ != NULL) fidwater_->::sln::fid::Clear();
    }
    if (_has_bit(3)) {
      if (basis_ != NULL) basis_->::sln::basis::Clear();
    }
    if (_has_bit(4)) {
      if (options_ != NULL) options_->::sln::options::Clear();
    }
  }
  yhat_.Clear();
  amplitudes_.Clear();
  matgroups_.Clear();
  matbasis_.Clear();
  lm_opts_.Clear();
  lm_info_.Clear();
  norm_val_.Clear();
  crlbs_.Clear();
  q_.Clear();
  amp_norm_.Clear();
  crlbs_norm_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool results::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sln.fid fidraw = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fidraw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fidproc;
        break;
      }
      
      // optional .sln.fid fidproc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fidproc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fidproc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fidwater;
        break;
      }
      
      // optional .sln.fid fidwater = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fidwater:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fidwater()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_basis;
        break;
      }
      
      // optional .sln.basis basis = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_basis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basis()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_options;
        break;
      }
      
      // optional .sln.options options = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_yhat;
        break;
      }
      
      // repeated .sln.comp_vec yhat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yhat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yhat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_yhat;
        if (input->ExpectTag(58)) goto parse_amplitudes;
        break;
      }
      
      // repeated .sln.vec amplitudes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_amplitudes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_amplitudes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_amplitudes;
        if (input->ExpectTag(66)) goto parse_matgroups;
        break;
      }
      
      // repeated .sln.comp_mat matgroups = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matgroups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matgroups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_matgroups;
        if (input->ExpectTag(74)) goto parse_matbasis;
        break;
      }
      
      // repeated .sln.comp_mat matbasis = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matbasis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matbasis()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_matbasis;
        if (input->ExpectTag(81)) goto parse_lm_opts;
        break;
      }
      
      // repeated double lm_opts = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lm_opts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 81, input, this->mutable_lm_opts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_lm_opts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_lm_opts;
        if (input->ExpectTag(90)) goto parse_lm_info;
        break;
      }
      
      // repeated .sln.vec lm_info = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lm_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lm_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_lm_info;
        if (input->ExpectTag(97)) goto parse_norm_val;
        break;
      }
      
      // repeated double norm_val = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_norm_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 97, input, this->mutable_norm_val())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_norm_val())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_norm_val;
        if (input->ExpectTag(106)) goto parse_crlbs;
        break;
      }
      
      // repeated .sln.vec crlbs = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crlbs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_crlbs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_crlbs;
        if (input->ExpectTag(113)) goto parse_q;
        break;
      }
      
      // repeated double q = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_q:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 113, input, this->mutable_q())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_q())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_q;
        if (input->ExpectTag(122)) goto parse_amp_norm;
        break;
      }
      
      // repeated .sln.vec amp_norm = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_amp_norm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_amp_norm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_amp_norm;
        if (input->ExpectTag(130)) goto parse_crlbs_norm;
        break;
      }
      
      // repeated .sln.vec crlbs_norm = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crlbs_norm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_crlbs_norm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_crlbs_norm;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void results::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .sln.fid fidraw = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fidraw(), output);
  }
  
  // optional .sln.fid fidproc = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fidproc(), output);
  }
  
  // optional .sln.fid fidwater = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fidwater(), output);
  }
  
  // optional .sln.basis basis = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->basis(), output);
  }
  
  // optional .sln.options options = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->options(), output);
  }
  
  // repeated .sln.comp_vec yhat = 6;
  for (int i = 0; i < this->yhat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->yhat(i), output);
  }
  
  // repeated .sln.vec amplitudes = 7;
  for (int i = 0; i < this->amplitudes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->amplitudes(i), output);
  }
  
  // repeated .sln.comp_mat matgroups = 8;
  for (int i = 0; i < this->matgroups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->matgroups(i), output);
  }
  
  // repeated .sln.comp_mat matbasis = 9;
  for (int i = 0; i < this->matbasis_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->matbasis(i), output);
  }
  
  // repeated double lm_opts = 10;
  for (int i = 0; i < this->lm_opts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      10, this->lm_opts(i), output);
  }
  
  // repeated .sln.vec lm_info = 11;
  for (int i = 0; i < this->lm_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->lm_info(i), output);
  }
  
  // repeated double norm_val = 12;
  for (int i = 0; i < this->norm_val_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      12, this->norm_val(i), output);
  }
  
  // repeated .sln.vec crlbs = 13;
  for (int i = 0; i < this->crlbs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->crlbs(i), output);
  }
  
  // repeated double q = 14;
  for (int i = 0; i < this->q_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      14, this->q(i), output);
  }
  
  // repeated .sln.vec amp_norm = 15;
  for (int i = 0; i < this->amp_norm_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->amp_norm(i), output);
  }
  
  // repeated .sln.vec crlbs_norm = 16;
  for (int i = 0; i < this->crlbs_norm_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->crlbs_norm(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* results::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .sln.fid fidraw = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fidraw(), target);
  }
  
  // optional .sln.fid fidproc = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fidproc(), target);
  }
  
  // optional .sln.fid fidwater = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fidwater(), target);
  }
  
  // optional .sln.basis basis = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->basis(), target);
  }
  
  // optional .sln.options options = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->options(), target);
  }
  
  // repeated .sln.comp_vec yhat = 6;
  for (int i = 0; i < this->yhat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->yhat(i), target);
  }
  
  // repeated .sln.vec amplitudes = 7;
  for (int i = 0; i < this->amplitudes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->amplitudes(i), target);
  }
  
  // repeated .sln.comp_mat matgroups = 8;
  for (int i = 0; i < this->matgroups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->matgroups(i), target);
  }
  
  // repeated .sln.comp_mat matbasis = 9;
  for (int i = 0; i < this->matbasis_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->matbasis(i), target);
  }
  
  // repeated double lm_opts = 10;
  for (int i = 0; i < this->lm_opts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(10, this->lm_opts(i), target);
  }
  
  // repeated .sln.vec lm_info = 11;
  for (int i = 0; i < this->lm_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->lm_info(i), target);
  }
  
  // repeated double norm_val = 12;
  for (int i = 0; i < this->norm_val_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(12, this->norm_val(i), target);
  }
  
  // repeated .sln.vec crlbs = 13;
  for (int i = 0; i < this->crlbs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->crlbs(i), target);
  }
  
  // repeated double q = 14;
  for (int i = 0; i < this->q_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(14, this->q(i), target);
  }
  
  // repeated .sln.vec amp_norm = 15;
  for (int i = 0; i < this->amp_norm_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->amp_norm(i), target);
  }
  
  // repeated .sln.vec crlbs_norm = 16;
  for (int i = 0; i < this->crlbs_norm_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->crlbs_norm(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int results::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .sln.fid fidraw = 1;
    if (has_fidraw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fidraw());
    }
    
    // optional .sln.fid fidproc = 2;
    if (has_fidproc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fidproc());
    }
    
    // optional .sln.fid fidwater = 3;
    if (has_fidwater()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fidwater());
    }
    
    // optional .sln.basis basis = 4;
    if (has_basis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basis());
    }
    
    // optional .sln.options options = 5;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }
    
  }
  // repeated .sln.comp_vec yhat = 6;
  total_size += 1 * this->yhat_size();
  for (int i = 0; i < this->yhat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yhat(i));
  }
  
  // repeated .sln.vec amplitudes = 7;
  total_size += 1 * this->amplitudes_size();
  for (int i = 0; i < this->amplitudes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->amplitudes(i));
  }
  
  // repeated .sln.comp_mat matgroups = 8;
  total_size += 1 * this->matgroups_size();
  for (int i = 0; i < this->matgroups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matgroups(i));
  }
  
  // repeated .sln.comp_mat matbasis = 9;
  total_size += 1 * this->matbasis_size();
  for (int i = 0; i < this->matbasis_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matbasis(i));
  }
  
  // repeated double lm_opts = 10;
  {
    int data_size = 0;
    data_size = 8 * this->lm_opts_size();
    total_size += 1 * this->lm_opts_size() + data_size;
  }
  
  // repeated .sln.vec lm_info = 11;
  total_size += 1 * this->lm_info_size();
  for (int i = 0; i < this->lm_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lm_info(i));
  }
  
  // repeated double norm_val = 12;
  {
    int data_size = 0;
    data_size = 8 * this->norm_val_size();
    total_size += 1 * this->norm_val_size() + data_size;
  }
  
  // repeated .sln.vec crlbs = 13;
  total_size += 1 * this->crlbs_size();
  for (int i = 0; i < this->crlbs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->crlbs(i));
  }
  
  // repeated double q = 14;
  {
    int data_size = 0;
    data_size = 8 * this->q_size();
    total_size += 1 * this->q_size() + data_size;
  }
  
  // repeated .sln.vec amp_norm = 15;
  total_size += 1 * this->amp_norm_size();
  for (int i = 0; i < this->amp_norm_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->amp_norm(i));
  }
  
  // repeated .sln.vec crlbs_norm = 16;
  total_size += 2 * this->crlbs_norm_size();
  for (int i = 0; i < this->crlbs_norm_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->crlbs_norm(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void results::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const results* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const results*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void results::MergeFrom(const results& from) {
  GOOGLE_CHECK_NE(&from, this);
  yhat_.MergeFrom(from.yhat_);
  amplitudes_.MergeFrom(from.amplitudes_);
  matgroups_.MergeFrom(from.matgroups_);
  matbasis_.MergeFrom(from.matbasis_);
  lm_opts_.MergeFrom(from.lm_opts_);
  lm_info_.MergeFrom(from.lm_info_);
  norm_val_.MergeFrom(from.norm_val_);
  crlbs_.MergeFrom(from.crlbs_);
  q_.MergeFrom(from.q_);
  amp_norm_.MergeFrom(from.amp_norm_);
  crlbs_norm_.MergeFrom(from.crlbs_norm_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_fidraw()->::sln::fid::MergeFrom(from.fidraw());
    }
    if (from._has_bit(1)) {
      mutable_fidproc()->::sln::fid::MergeFrom(from.fidproc());
    }
    if (from._has_bit(2)) {
      mutable_fidwater()->::sln::fid::MergeFrom(from.fidwater());
    }
    if (from._has_bit(3)) {
      mutable_basis()->::sln::basis::MergeFrom(from.basis());
    }
    if (from._has_bit(4)) {
      mutable_options()->::sln::options::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void results::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void results::CopyFrom(const results& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool results::IsInitialized() const {
  
  return true;
}

void results::Swap(results* other) {
  if (other != this) {
    std::swap(fidraw_, other->fidraw_);
    std::swap(fidproc_, other->fidproc_);
    std::swap(fidwater_, other->fidwater_);
    std::swap(basis_, other->basis_);
    std::swap(options_, other->options_);
    yhat_.Swap(&other->yhat_);
    amplitudes_.Swap(&other->amplitudes_);
    matgroups_.Swap(&other->matgroups_);
    matbasis_.Swap(&other->matbasis_);
    lm_opts_.Swap(&other->lm_opts_);
    lm_info_.Swap(&other->lm_info_);
    norm_val_.Swap(&other->norm_val_);
    crlbs_.Swap(&other->crlbs_);
    q_.Swap(&other->q_);
    amp_norm_.Swap(&other->amp_norm_);
    crlbs_norm_.Swap(&other->crlbs_norm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata results::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = results_descriptor_;
  metadata.reflection = results_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string fid::_default_strfilename_;
const ::std::string fid::_default_strsequence_;
#ifndef _MSC_VER
const int fid::kStrfilenameFieldNumber;
const int fid::kFsFieldNumber;
const int fid::kBsamplingfrequencyknownFieldNumber;
const int fid::kFtFieldNumber;
const int fid::kBtransmitterfrequencyknownFieldNumber;
const int fid::kStrsequenceFieldNumber;
const int fid::kPulsesequenceknownFieldNumber;
const int fid::kNaveragesFieldNumber;
const int fid::kBaveragesknownFieldNumber;
const int fid::kPhi0FieldNumber;
const int fid::kBzeroorderphaseknownFieldNumber;
const int fid::kPhi1FieldNumber;
const int fid::kBfirstorderphaseknownFieldNumber;
const int fid::kRefFieldNumber;
const int fid::kBreferenceknownFieldNumber;
const int fid::kTauFieldNumber;
const int fid::kBechoknownFieldNumber;
const int fid::kSnrFieldNumber;
const int fid::kBsnrknownFieldNumber;
const int fid::kNpointsFieldNumber;
const int fid::kFidsFieldNumber;
const int fid::kNormValFieldNumber;
const int fid::kRowsFieldNumber;
const int fid::kColsFieldNumber;
const int fid::kSlicesFieldNumber;
const int fid::kVoxelDimKnownFieldNumber;
const int fid::kVoxelDimFieldNumber;
const int fid::kVoiDimKnownFieldNumber;
const int fid::kVoiDimFieldNumber;
const int fid::kPosKnownFieldNumber;
const int fid::kPosFieldNumber;
const int fid::kRowDirnKnownFieldNumber;
const int fid::kRowDirnFieldNumber;
const int fid::kColDirnKnownFieldNumber;
const int fid::kColDirnFieldNumber;
#endif  // !_MSC_VER

fid::fid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fid::InitAsDefaultInstance() {
}

fid::fid(const fid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fid::SharedCtor() {
  _cached_size_ = 0;
  strfilename_ = const_cast< ::std::string*>(&_default_strfilename_);
  fs_ = 0;
  bsamplingfrequencyknown_ = false;
  ft_ = 0;
  btransmitterfrequencyknown_ = false;
  strsequence_ = const_cast< ::std::string*>(&_default_strsequence_);
  pulsesequenceknown_ = false;
  naverages_ = 0;
  baveragesknown_ = false;
  tau_ = 0;
  bechoknown_ = false;
  npoints_ = 0;
  norm_val_ = 0;
  rows_ = 0;
  cols_ = 0;
  slices_ = 0;
  voxel_dim_known_ = false;
  voi_dim_known_ = false;
  pos_known_ = false;
  row_dirn_known_ = false;
  col_dirn_known_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fid::~fid() {
  SharedDtor();
}

void fid::SharedDtor() {
  if (strfilename_ != &_default_strfilename_) {
    delete strfilename_;
  }
  if (strsequence_ != &_default_strsequence_) {
    delete strsequence_;
  }
  if (this != default_instance_) {
  }
}

void fid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fid_descriptor_;
}

const fid& fid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tarquin_2eproto();  return *default_instance_;
}

fid* fid::default_instance_ = NULL;

fid* fid::New() const {
  return new fid;
}

void fid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (strfilename_ != &_default_strfilename_) {
        strfilename_->clear();
      }
    }
    fs_ = 0;
    bsamplingfrequencyknown_ = false;
    ft_ = 0;
    btransmitterfrequencyknown_ = false;
    if (_has_bit(5)) {
      if (strsequence_ != &_default_strsequence_) {
        strsequence_->clear();
      }
    }
    pulsesequenceknown_ = false;
    naverages_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    baveragesknown_ = false;
    tau_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    bechoknown_ = false;
    npoints_ = 0;
    norm_val_ = 0;
    rows_ = 0;
    cols_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    slices_ = 0;
    voxel_dim_known_ = false;
    voi_dim_known_ = false;
    pos_known_ = false;
    row_dirn_known_ = false;
  }
  if (_has_bits_[33 / 32] & (0xffu << (33 % 32))) {
    col_dirn_known_ = false;
  }
  phi0_.Clear();
  bzeroorderphaseknown_.Clear();
  phi1_.Clear();
  bfirstorderphaseknown_.Clear();
  ref_.Clear();
  breferenceknown_.Clear();
  snr_.Clear();
  bsnrknown_.Clear();
  fids_.Clear();
  voxel_dim_.Clear();
  voi_dim_.Clear();
  pos_.Clear();
  row_dirn_.Clear();
  col_dirn_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strfilename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strfilename().data(), this->strfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_fs;
        break;
      }
      
      // optional double fs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fs_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bsamplingfrequencyknown;
        break;
      }
      
      // optional bool bsamplingfrequencyknown = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bsamplingfrequencyknown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bsamplingfrequencyknown_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_ft;
        break;
      }
      
      // optional double ft = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ft_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_btransmitterfrequencyknown;
        break;
      }
      
      // optional bool btransmitterfrequencyknown = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_btransmitterfrequencyknown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &btransmitterfrequencyknown_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_strsequence;
        break;
      }
      
      // optional string strsequence = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strsequence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strsequence()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strsequence().data(), this->strsequence().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pulsesequenceknown;
        break;
      }
      
      // optional bool pulsesequenceknown = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pulsesequenceknown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pulsesequenceknown_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_naverages;
        break;
      }
      
      // optional int32 naverages = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_naverages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &naverages_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_baveragesknown;
        break;
      }
      
      // optional bool baveragesknown = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baveragesknown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &baveragesknown_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_phi0;
        break;
      }
      
      // repeated double phi0 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_phi0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 81, input, this->mutable_phi0())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_phi0())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_phi0;
        if (input->ExpectTag(88)) goto parse_bzeroorderphaseknown;
        break;
      }
      
      // repeated bool bzeroorderphaseknown = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bzeroorderphaseknown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 88, input, this->mutable_bzeroorderphaseknown())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_bzeroorderphaseknown())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bzeroorderphaseknown;
        if (input->ExpectTag(97)) goto parse_phi1;
        break;
      }
      
      // repeated double phi1 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_phi1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 97, input, this->mutable_phi1())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_phi1())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_phi1;
        if (input->ExpectTag(104)) goto parse_bfirstorderphaseknown;
        break;
      }
      
      // repeated bool bfirstorderphaseknown = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bfirstorderphaseknown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 104, input, this->mutable_bfirstorderphaseknown())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_bfirstorderphaseknown())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_bfirstorderphaseknown;
        if (input->ExpectTag(113)) goto parse_ref;
        break;
      }
      
      // repeated double ref = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 113, input, this->mutable_ref())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ref())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_ref;
        if (input->ExpectTag(120)) goto parse_breferenceknown;
        break;
      }
      
      // repeated bool breferenceknown = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_breferenceknown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 120, input, this->mutable_breferenceknown())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_breferenceknown())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_breferenceknown;
        if (input->ExpectTag(129)) goto parse_tau;
        break;
      }
      
      // optional double tau = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_tau:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tau_)));
          _set_bit(15);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_bechoknown;
        break;
      }
      
      // optional bool bechoknown = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bechoknown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bechoknown_)));
          _set_bit(16);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_snr;
        break;
      }
      
      // repeated double snr = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_snr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 145, input, this->mutable_snr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_snr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_snr;
        if (input->ExpectTag(152)) goto parse_bsnrknown;
        break;
      }
      
      // repeated bool bsnrknown = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bsnrknown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 152, input, this->mutable_bsnrknown())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_bsnrknown())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_bsnrknown;
        if (input->ExpectTag(160)) goto parse_npoints;
        break;
      }
      
      // optional int32 npoints = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npoints_)));
          _set_bit(19);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_fids;
        break;
      }
      
      // repeated .sln.comp_vec fids = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_fids;
        if (input->ExpectTag(177)) goto parse_norm_val;
        break;
      }
      
      // optional double norm_val = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_norm_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &norm_val_)));
          _set_bit(21);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_rows;
        break;
      }
      
      // optional int32 rows = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));
          _set_bit(22);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_cols;
        break;
      }
      
      // optional int32 cols = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cols_)));
          _set_bit(23);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_slices;
        break;
      }
      
      // optional int32 slices = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slices_)));
          _set_bit(24);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_voxel_dim_known;
        break;
      }
      
      // optional bool voxel_dim_known = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voxel_dim_known:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &voxel_dim_known_)));
          _set_bit(25);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_voxel_dim;
        break;
      }
      
      // repeated double voxel_dim = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_voxel_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 217, input, this->mutable_voxel_dim())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_voxel_dim())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_voxel_dim;
        if (input->ExpectTag(224)) goto parse_voi_dim_known;
        break;
      }
      
      // optional bool voi_dim_known = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voi_dim_known:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &voi_dim_known_)));
          _set_bit(27);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_voi_dim;
        break;
      }
      
      // repeated double voi_dim = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_voi_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 233, input, this->mutable_voi_dim())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_voi_dim())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_voi_dim;
        if (input->ExpectTag(240)) goto parse_pos_known;
        break;
      }
      
      // optional bool pos_known = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_known:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pos_known_)));
          _set_bit(29);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_pos;
        break;
      }
      
      // repeated double pos = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 249, input, this->mutable_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_pos;
        if (input->ExpectTag(256)) goto parse_row_dirn_known;
        break;
      }
      
      // optional bool row_dirn_known = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row_dirn_known:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &row_dirn_known_)));
          _set_bit(31);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_row_dirn;
        break;
      }
      
      // repeated double row_dirn = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_row_dirn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 265, input, this->mutable_row_dirn())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_row_dirn())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_row_dirn;
        if (input->ExpectTag(272)) goto parse_col_dirn_known;
        break;
      }
      
      // optional bool col_dirn_known = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col_dirn_known:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &col_dirn_known_)));
          _set_bit(33);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(281)) goto parse_col_dirn;
        break;
      }
      
      // repeated double col_dirn = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_col_dirn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 281, input, this->mutable_col_dirn())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_col_dirn())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(281)) goto parse_col_dirn;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string strfilename = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strfilename().data(), this->strfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strfilename(), output);
  }
  
  // optional double fs = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->fs(), output);
  }
  
  // optional bool bsamplingfrequencyknown = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bsamplingfrequencyknown(), output);
  }
  
  // optional double ft = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ft(), output);
  }
  
  // optional bool btransmitterfrequencyknown = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->btransmitterfrequencyknown(), output);
  }
  
  // optional string strsequence = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strsequence().data(), this->strsequence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->strsequence(), output);
  }
  
  // optional bool pulsesequenceknown = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->pulsesequenceknown(), output);
  }
  
  // optional int32 naverages = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->naverages(), output);
  }
  
  // optional bool baveragesknown = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->baveragesknown(), output);
  }
  
  // repeated double phi0 = 10;
  for (int i = 0; i < this->phi0_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      10, this->phi0(i), output);
  }
  
  // repeated bool bzeroorderphaseknown = 11;
  for (int i = 0; i < this->bzeroorderphaseknown_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      11, this->bzeroorderphaseknown(i), output);
  }
  
  // repeated double phi1 = 12;
  for (int i = 0; i < this->phi1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      12, this->phi1(i), output);
  }
  
  // repeated bool bfirstorderphaseknown = 13;
  for (int i = 0; i < this->bfirstorderphaseknown_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      13, this->bfirstorderphaseknown(i), output);
  }
  
  // repeated double ref = 14;
  for (int i = 0; i < this->ref_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      14, this->ref(i), output);
  }
  
  // repeated bool breferenceknown = 15;
  for (int i = 0; i < this->breferenceknown_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      15, this->breferenceknown(i), output);
  }
  
  // optional double tau = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->tau(), output);
  }
  
  // optional bool bechoknown = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->bechoknown(), output);
  }
  
  // repeated double snr = 18;
  for (int i = 0; i < this->snr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      18, this->snr(i), output);
  }
  
  // repeated bool bsnrknown = 19;
  for (int i = 0; i < this->bsnrknown_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      19, this->bsnrknown(i), output);
  }
  
  // optional int32 npoints = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->npoints(), output);
  }
  
  // repeated .sln.comp_vec fids = 21;
  for (int i = 0; i < this->fids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->fids(i), output);
  }
  
  // optional double norm_val = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->norm_val(), output);
  }
  
  // optional int32 rows = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->rows(), output);
  }
  
  // optional int32 cols = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->cols(), output);
  }
  
  // optional int32 slices = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->slices(), output);
  }
  
  // optional bool voxel_dim_known = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->voxel_dim_known(), output);
  }
  
  // repeated double voxel_dim = 27;
  for (int i = 0; i < this->voxel_dim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      27, this->voxel_dim(i), output);
  }
  
  // optional bool voi_dim_known = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->voi_dim_known(), output);
  }
  
  // repeated double voi_dim = 29;
  for (int i = 0; i < this->voi_dim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      29, this->voi_dim(i), output);
  }
  
  // optional bool pos_known = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->pos_known(), output);
  }
  
  // repeated double pos = 31;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      31, this->pos(i), output);
  }
  
  // optional bool row_dirn_known = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->row_dirn_known(), output);
  }
  
  // repeated double row_dirn = 33;
  for (int i = 0; i < this->row_dirn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      33, this->row_dirn(i), output);
  }
  
  // optional bool col_dirn_known = 34;
  if (_has_bit(33)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->col_dirn_known(), output);
  }
  
  // repeated double col_dirn = 35;
  for (int i = 0; i < this->col_dirn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      35, this->col_dirn(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string strfilename = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strfilename().data(), this->strfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strfilename(), target);
  }
  
  // optional double fs = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->fs(), target);
  }
  
  // optional bool bsamplingfrequencyknown = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bsamplingfrequencyknown(), target);
  }
  
  // optional double ft = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ft(), target);
  }
  
  // optional bool btransmitterfrequencyknown = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->btransmitterfrequencyknown(), target);
  }
  
  // optional string strsequence = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strsequence().data(), this->strsequence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->strsequence(), target);
  }
  
  // optional bool pulsesequenceknown = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->pulsesequenceknown(), target);
  }
  
  // optional int32 naverages = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->naverages(), target);
  }
  
  // optional bool baveragesknown = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->baveragesknown(), target);
  }
  
  // repeated double phi0 = 10;
  for (int i = 0; i < this->phi0_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(10, this->phi0(i), target);
  }
  
  // repeated bool bzeroorderphaseknown = 11;
  for (int i = 0; i < this->bzeroorderphaseknown_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(11, this->bzeroorderphaseknown(i), target);
  }
  
  // repeated double phi1 = 12;
  for (int i = 0; i < this->phi1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(12, this->phi1(i), target);
  }
  
  // repeated bool bfirstorderphaseknown = 13;
  for (int i = 0; i < this->bfirstorderphaseknown_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(13, this->bfirstorderphaseknown(i), target);
  }
  
  // repeated double ref = 14;
  for (int i = 0; i < this->ref_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(14, this->ref(i), target);
  }
  
  // repeated bool breferenceknown = 15;
  for (int i = 0; i < this->breferenceknown_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(15, this->breferenceknown(i), target);
  }
  
  // optional double tau = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->tau(), target);
  }
  
  // optional bool bechoknown = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->bechoknown(), target);
  }
  
  // repeated double snr = 18;
  for (int i = 0; i < this->snr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(18, this->snr(i), target);
  }
  
  // repeated bool bsnrknown = 19;
  for (int i = 0; i < this->bsnrknown_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(19, this->bsnrknown(i), target);
  }
  
  // optional int32 npoints = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->npoints(), target);
  }
  
  // repeated .sln.comp_vec fids = 21;
  for (int i = 0; i < this->fids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->fids(i), target);
  }
  
  // optional double norm_val = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->norm_val(), target);
  }
  
  // optional int32 rows = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->rows(), target);
  }
  
  // optional int32 cols = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->cols(), target);
  }
  
  // optional int32 slices = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->slices(), target);
  }
  
  // optional bool voxel_dim_known = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->voxel_dim_known(), target);
  }
  
  // repeated double voxel_dim = 27;
  for (int i = 0; i < this->voxel_dim_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(27, this->voxel_dim(i), target);
  }
  
  // optional bool voi_dim_known = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->voi_dim_known(), target);
  }
  
  // repeated double voi_dim = 29;
  for (int i = 0; i < this->voi_dim_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(29, this->voi_dim(i), target);
  }
  
  // optional bool pos_known = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->pos_known(), target);
  }
  
  // repeated double pos = 31;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(31, this->pos(i), target);
  }
  
  // optional bool row_dirn_known = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->row_dirn_known(), target);
  }
  
  // repeated double row_dirn = 33;
  for (int i = 0; i < this->row_dirn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(33, this->row_dirn(i), target);
  }
  
  // optional bool col_dirn_known = 34;
  if (_has_bit(33)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->col_dirn_known(), target);
  }
  
  // repeated double col_dirn = 35;
  for (int i = 0; i < this->col_dirn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(35, this->col_dirn(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fid::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string strfilename = 1;
    if (has_strfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strfilename());
    }
    
    // optional double fs = 2;
    if (has_fs()) {
      total_size += 1 + 8;
    }
    
    // optional bool bsamplingfrequencyknown = 3;
    if (has_bsamplingfrequencyknown()) {
      total_size += 1 + 1;
    }
    
    // optional double ft = 4;
    if (has_ft()) {
      total_size += 1 + 8;
    }
    
    // optional bool btransmitterfrequencyknown = 5;
    if (has_btransmitterfrequencyknown()) {
      total_size += 1 + 1;
    }
    
    // optional string strsequence = 6;
    if (has_strsequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strsequence());
    }
    
    // optional bool pulsesequenceknown = 7;
    if (has_pulsesequenceknown()) {
      total_size += 1 + 1;
    }
    
    // optional int32 naverages = 8;
    if (has_naverages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->naverages());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool baveragesknown = 9;
    if (has_baveragesknown()) {
      total_size += 1 + 1;
    }
    
    // optional double tau = 16;
    if (has_tau()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool bechoknown = 17;
    if (has_bechoknown()) {
      total_size += 2 + 1;
    }
    
    // optional int32 npoints = 20;
    if (has_npoints()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npoints());
    }
    
    // optional double norm_val = 22;
    if (has_norm_val()) {
      total_size += 2 + 8;
    }
    
    // optional int32 rows = 23;
    if (has_rows()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rows());
    }
    
    // optional int32 cols = 24;
    if (has_cols()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cols());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 slices = 25;
    if (has_slices()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slices());
    }
    
    // optional bool voxel_dim_known = 26;
    if (has_voxel_dim_known()) {
      total_size += 2 + 1;
    }
    
    // optional bool voi_dim_known = 28;
    if (has_voi_dim_known()) {
      total_size += 2 + 1;
    }
    
    // optional bool pos_known = 30;
    if (has_pos_known()) {
      total_size += 2 + 1;
    }
    
    // optional bool row_dirn_known = 32;
    if (has_row_dirn_known()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[33 / 32] & (0xffu << (33 % 32))) {
    // optional bool col_dirn_known = 34;
    if (has_col_dirn_known()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated double phi0 = 10;
  {
    int data_size = 0;
    data_size = 8 * this->phi0_size();
    total_size += 1 * this->phi0_size() + data_size;
  }
  
  // repeated bool bzeroorderphaseknown = 11;
  {
    int data_size = 0;
    data_size = 1 * this->bzeroorderphaseknown_size();
    total_size += 1 * this->bzeroorderphaseknown_size() + data_size;
  }
  
  // repeated double phi1 = 12;
  {
    int data_size = 0;
    data_size = 8 * this->phi1_size();
    total_size += 1 * this->phi1_size() + data_size;
  }
  
  // repeated bool bfirstorderphaseknown = 13;
  {
    int data_size = 0;
    data_size = 1 * this->bfirstorderphaseknown_size();
    total_size += 1 * this->bfirstorderphaseknown_size() + data_size;
  }
  
  // repeated double ref = 14;
  {
    int data_size = 0;
    data_size = 8 * this->ref_size();
    total_size += 1 * this->ref_size() + data_size;
  }
  
  // repeated bool breferenceknown = 15;
  {
    int data_size = 0;
    data_size = 1 * this->breferenceknown_size();
    total_size += 1 * this->breferenceknown_size() + data_size;
  }
  
  // repeated double snr = 18;
  {
    int data_size = 0;
    data_size = 8 * this->snr_size();
    total_size += 2 * this->snr_size() + data_size;
  }
  
  // repeated bool bsnrknown = 19;
  {
    int data_size = 0;
    data_size = 1 * this->bsnrknown_size();
    total_size += 2 * this->bsnrknown_size() + data_size;
  }
  
  // repeated .sln.comp_vec fids = 21;
  total_size += 2 * this->fids_size();
  for (int i = 0; i < this->fids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fids(i));
  }
  
  // repeated double voxel_dim = 27;
  {
    int data_size = 0;
    data_size = 8 * this->voxel_dim_size();
    total_size += 2 * this->voxel_dim_size() + data_size;
  }
  
  // repeated double voi_dim = 29;
  {
    int data_size = 0;
    data_size = 8 * this->voi_dim_size();
    total_size += 2 * this->voi_dim_size() + data_size;
  }
  
  // repeated double pos = 31;
  {
    int data_size = 0;
    data_size = 8 * this->pos_size();
    total_size += 2 * this->pos_size() + data_size;
  }
  
  // repeated double row_dirn = 33;
  {
    int data_size = 0;
    data_size = 8 * this->row_dirn_size();
    total_size += 2 * this->row_dirn_size() + data_size;
  }
  
  // repeated double col_dirn = 35;
  {
    int data_size = 0;
    data_size = 8 * this->col_dirn_size();
    total_size += 2 * this->col_dirn_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fid::MergeFrom(const fid& from) {
  GOOGLE_CHECK_NE(&from, this);
  phi0_.MergeFrom(from.phi0_);
  bzeroorderphaseknown_.MergeFrom(from.bzeroorderphaseknown_);
  phi1_.MergeFrom(from.phi1_);
  bfirstorderphaseknown_.MergeFrom(from.bfirstorderphaseknown_);
  ref_.MergeFrom(from.ref_);
  breferenceknown_.MergeFrom(from.breferenceknown_);
  snr_.MergeFrom(from.snr_);
  bsnrknown_.MergeFrom(from.bsnrknown_);
  fids_.MergeFrom(from.fids_);
  voxel_dim_.MergeFrom(from.voxel_dim_);
  voi_dim_.MergeFrom(from.voi_dim_);
  pos_.MergeFrom(from.pos_);
  row_dirn_.MergeFrom(from.row_dirn_);
  col_dirn_.MergeFrom(from.col_dirn_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_strfilename(from.strfilename());
    }
    if (from._has_bit(1)) {
      set_fs(from.fs());
    }
    if (from._has_bit(2)) {
      set_bsamplingfrequencyknown(from.bsamplingfrequencyknown());
    }
    if (from._has_bit(3)) {
      set_ft(from.ft());
    }
    if (from._has_bit(4)) {
      set_btransmitterfrequencyknown(from.btransmitterfrequencyknown());
    }
    if (from._has_bit(5)) {
      set_strsequence(from.strsequence());
    }
    if (from._has_bit(6)) {
      set_pulsesequenceknown(from.pulsesequenceknown());
    }
    if (from._has_bit(7)) {
      set_naverages(from.naverages());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_baveragesknown(from.baveragesknown());
    }
    if (from._has_bit(15)) {
      set_tau(from.tau());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_bechoknown(from.bechoknown());
    }
    if (from._has_bit(19)) {
      set_npoints(from.npoints());
    }
    if (from._has_bit(21)) {
      set_norm_val(from.norm_val());
    }
    if (from._has_bit(22)) {
      set_rows(from.rows());
    }
    if (from._has_bit(23)) {
      set_cols(from.cols());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_slices(from.slices());
    }
    if (from._has_bit(25)) {
      set_voxel_dim_known(from.voxel_dim_known());
    }
    if (from._has_bit(27)) {
      set_voi_dim_known(from.voi_dim_known());
    }
    if (from._has_bit(29)) {
      set_pos_known(from.pos_known());
    }
    if (from._has_bit(31)) {
      set_row_dirn_known(from.row_dirn_known());
    }
  }
  if (from._has_bits_[33 / 32] & (0xffu << (33 % 32))) {
    if (from._has_bit(33)) {
      set_col_dirn_known(from.col_dirn_known());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fid::CopyFrom(const fid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fid::IsInitialized() const {
  
  return true;
}

void fid::Swap(fid* other) {
  if (other != this) {
    std::swap(strfilename_, other->strfilename_);
    std::swap(fs_, other->fs_);
    std::swap(bsamplingfrequencyknown_, other->bsamplingfrequencyknown_);
    std::swap(ft_, other->ft_);
    std::swap(btransmitterfrequencyknown_, other->btransmitterfrequencyknown_);
    std::swap(strsequence_, other->strsequence_);
    std::swap(pulsesequenceknown_, other->pulsesequenceknown_);
    std::swap(naverages_, other->naverages_);
    std::swap(baveragesknown_, other->baveragesknown_);
    phi0_.Swap(&other->phi0_);
    bzeroorderphaseknown_.Swap(&other->bzeroorderphaseknown_);
    phi1_.Swap(&other->phi1_);
    bfirstorderphaseknown_.Swap(&other->bfirstorderphaseknown_);
    ref_.Swap(&other->ref_);
    breferenceknown_.Swap(&other->breferenceknown_);
    std::swap(tau_, other->tau_);
    std::swap(bechoknown_, other->bechoknown_);
    snr_.Swap(&other->snr_);
    bsnrknown_.Swap(&other->bsnrknown_);
    std::swap(npoints_, other->npoints_);
    fids_.Swap(&other->fids_);
    std::swap(norm_val_, other->norm_val_);
    std::swap(rows_, other->rows_);
    std::swap(cols_, other->cols_);
    std::swap(slices_, other->slices_);
    std::swap(voxel_dim_known_, other->voxel_dim_known_);
    voxel_dim_.Swap(&other->voxel_dim_);
    std::swap(voi_dim_known_, other->voi_dim_known_);
    voi_dim_.Swap(&other->voi_dim_);
    std::swap(pos_known_, other->pos_known_);
    pos_.Swap(&other->pos_);
    std::swap(row_dirn_known_, other->row_dirn_known_);
    row_dirn_.Swap(&other->row_dirn_);
    std::swap(col_dirn_known_, other->col_dirn_known_);
    col_dirn_.Swap(&other->col_dirn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fid_descriptor_;
  metadata.reflection = fid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int coord::kRowFieldNumber;
const int coord::kColFieldNumber;
const int coord::kSliceFieldNumber;
#endif  // !_MSC_VER

coord::coord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void coord::InitAsDefaultInstance() {
}

coord::coord(const coord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void coord::SharedCtor() {
  _cached_size_ = 0;
  row_ = 0;
  col_ = 0;
  slice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

coord::~coord() {
  SharedDtor();
}

void coord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void coord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* coord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return coord_descriptor_;
}

const coord& coord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tarquin_2eproto();  return *default_instance_;
}

coord* coord::default_instance_ = NULL;

coord* coord::New() const {
  return new coord;
}

void coord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    row_ = 0;
    col_ = 0;
    slice_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool coord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 row = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_col;
        break;
      }
      
      // optional int32 col = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slice;
        break;
      }
      
      // optional int32 slice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slice_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void coord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 row = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }
  
  // optional int32 col = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col(), output);
  }
  
  // optional int32 slice = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slice(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* coord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 row = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }
  
  // optional int32 col = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col(), target);
  }
  
  // optional int32 slice = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slice(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int coord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 row = 1;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }
    
    // optional int32 col = 2;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->col());
    }
    
    // optional int32 slice = 3;
    if (has_slice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slice());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void coord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const coord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const coord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void coord::MergeFrom(const coord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_row(from.row());
    }
    if (from._has_bit(1)) {
      set_col(from.col());
    }
    if (from._has_bit(2)) {
      set_slice(from.slice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void coord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void coord::CopyFrom(const coord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool coord::IsInitialized() const {
  
  return true;
}

void coord::Swap(coord* other) {
  if (other != this) {
    std::swap(row_, other->row_);
    std::swap(col_, other->col_);
    std::swap(slice_, other->slice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata coord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = coord_descriptor_;
  metadata.reflection = coord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int comp_point::kRealFieldNumber;
const int comp_point::kImagFieldNumber;
#endif  // !_MSC_VER

comp_point::comp_point()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void comp_point::InitAsDefaultInstance() {
}

comp_point::comp_point(const comp_point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void comp_point::SharedCtor() {
  _cached_size_ = 0;
  real_ = 0;
  imag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

comp_point::~comp_point() {
  SharedDtor();
}

void comp_point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void comp_point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* comp_point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return comp_point_descriptor_;
}

const comp_point& comp_point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tarquin_2eproto();  return *default_instance_;
}

comp_point* comp_point::default_instance_ = NULL;

comp_point* comp_point::New() const {
  return new comp_point;
}

void comp_point::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    real_ = 0;
    imag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool comp_point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double real = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &real_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_imag;
        break;
      }
      
      // optional double imag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_imag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &imag_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void comp_point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double real = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->real(), output);
  }
  
  // optional double imag = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->imag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* comp_point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double real = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->real(), target);
  }
  
  // optional double imag = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->imag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int comp_point::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double real = 1;
    if (has_real()) {
      total_size += 1 + 8;
    }
    
    // optional double imag = 2;
    if (has_imag()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void comp_point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const comp_point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const comp_point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void comp_point::MergeFrom(const comp_point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_real(from.real());
    }
    if (from._has_bit(1)) {
      set_imag(from.imag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void comp_point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void comp_point::CopyFrom(const comp_point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool comp_point::IsInitialized() const {
  
  return true;
}

void comp_point::Swap(comp_point* other) {
  if (other != this) {
    std::swap(real_, other->real_);
    std::swap(imag_, other->imag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata comp_point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = comp_point_descriptor_;
  metadata.reflection = comp_point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int comp_vec::kCompPointFieldNumber;
#endif  // !_MSC_VER

comp_vec::comp_vec()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void comp_vec::InitAsDefaultInstance() {
}

comp_vec::comp_vec(const comp_vec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void comp_vec::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

comp_vec::~comp_vec() {
  SharedDtor();
}

void comp_vec::SharedDtor() {
  if (this != default_instance_) {
  }
}

void comp_vec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* comp_vec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return comp_vec_descriptor_;
}

const comp_vec& comp_vec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tarquin_2eproto();  return *default_instance_;
}

comp_vec* comp_vec::default_instance_ = NULL;

comp_vec* comp_vec::New() const {
  return new comp_vec;
}

void comp_vec::Clear() {
  comp_point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool comp_vec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sln.comp_point comp_point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comp_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_comp_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_comp_point;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void comp_vec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sln.comp_point comp_point = 1;
  for (int i = 0; i < this->comp_point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->comp_point(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* comp_vec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .sln.comp_point comp_point = 1;
  for (int i = 0; i < this->comp_point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->comp_point(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int comp_vec::ByteSize() const {
  int total_size = 0;
  
  // repeated .sln.comp_point comp_point = 1;
  total_size += 1 * this->comp_point_size();
  for (int i = 0; i < this->comp_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comp_point(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void comp_vec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const comp_vec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const comp_vec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void comp_vec::MergeFrom(const comp_vec& from) {
  GOOGLE_CHECK_NE(&from, this);
  comp_point_.MergeFrom(from.comp_point_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void comp_vec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void comp_vec::CopyFrom(const comp_vec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool comp_vec::IsInitialized() const {
  
  return true;
}

void comp_vec::Swap(comp_vec* other) {
  if (other != this) {
    comp_point_.Swap(&other->comp_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata comp_vec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = comp_vec_descriptor_;
  metadata.reflection = comp_vec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int comp_mat::kCompVecFieldNumber;
#endif  // !_MSC_VER

comp_mat::comp_mat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void comp_mat::InitAsDefaultInstance() {
}

comp_mat::comp_mat(const comp_mat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void comp_mat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

comp_mat::~comp_mat() {
  SharedDtor();
}

void comp_mat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void comp_mat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* comp_mat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return comp_mat_descriptor_;
}

const comp_mat& comp_mat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tarquin_2eproto();  return *default_instance_;
}

comp_mat* comp_mat::default_instance_ = NULL;

comp_mat* comp_mat::New() const {
  return new comp_mat;
}

void comp_mat::Clear() {
  comp_vec_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool comp_mat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sln.comp_vec comp_vec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comp_vec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_comp_vec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_comp_vec;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void comp_mat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sln.comp_vec comp_vec = 1;
  for (int i = 0; i < this->comp_vec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->comp_vec(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* comp_mat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .sln.comp_vec comp_vec = 1;
  for (int i = 0; i < this->comp_vec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->comp_vec(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int comp_mat::ByteSize() const {
  int total_size = 0;
  
  // repeated .sln.comp_vec comp_vec = 1;
  total_size += 1 * this->comp_vec_size();
  for (int i = 0; i < this->comp_vec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comp_vec(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void comp_mat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const comp_mat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const comp_mat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void comp_mat::MergeFrom(const comp_mat& from) {
  GOOGLE_CHECK_NE(&from, this);
  comp_vec_.MergeFrom(from.comp_vec_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void comp_mat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void comp_mat::CopyFrom(const comp_mat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool comp_mat::IsInitialized() const {
  
  return true;
}

void comp_mat::Swap(comp_mat* other) {
  if (other != this) {
    comp_vec_.Swap(&other->comp_vec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata comp_mat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = comp_mat_descriptor_;
  metadata.reflection = comp_mat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vec::kPointFieldNumber;
#endif  // !_MSC_VER

vec::vec()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vec::InitAsDefaultInstance() {
}

vec::vec(const vec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vec::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vec::~vec() {
  SharedDtor();
}

void vec::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vec_descriptor_;
}

const vec& vec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tarquin_2eproto();  return *default_instance_;
}

vec* vec::default_instance_ = NULL;

vec* vec::New() const {
  return new vec;
}

void vec::Clear() {
  point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_point())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_point())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_point;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double point = 1;
  for (int i = 0; i < this->point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->point(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double point = 1;
  for (int i = 0; i < this->point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->point(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vec::ByteSize() const {
  int total_size = 0;
  
  // repeated double point = 1;
  {
    int data_size = 0;
    data_size = 8 * this->point_size();
    total_size += 1 * this->point_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vec::MergeFrom(const vec& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_.MergeFrom(from.point_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vec::CopyFrom(const vec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vec::IsInitialized() const {
  
  return true;
}

void vec::Swap(vec* other) {
  if (other != this) {
    point_.Swap(&other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vec_descriptor_;
  metadata.reflection = vec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int signal::kFidVecFieldNumber;
#endif  // !_MSC_VER

signal::signal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void signal::InitAsDefaultInstance() {
}

signal::signal(const signal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void signal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

signal::~signal() {
  SharedDtor();
}

void signal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void signal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* signal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return signal_descriptor_;
}

const signal& signal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tarquin_2eproto();  return *default_instance_;
}

signal* signal::default_instance_ = NULL;

signal* signal::New() const {
  return new signal;
}

void signal::Clear() {
  fid_vec_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool signal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sln.fid fid_vec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fid_vec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fid_vec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fid_vec;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void signal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sln.fid fid_vec = 1;
  for (int i = 0; i < this->fid_vec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fid_vec(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* signal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .sln.fid fid_vec = 1;
  for (int i = 0; i < this->fid_vec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fid_vec(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int signal::ByteSize() const {
  int total_size = 0;
  
  // repeated .sln.fid fid_vec = 1;
  total_size += 1 * this->fid_vec_size();
  for (int i = 0; i < this->fid_vec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fid_vec(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void signal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const signal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const signal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void signal::MergeFrom(const signal& from) {
  GOOGLE_CHECK_NE(&from, this);
  fid_vec_.MergeFrom(from.fid_vec_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void signal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void signal::CopyFrom(const signal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool signal::IsInitialized() const {
  
  return true;
}

void signal::Swap(signal* other) {
  if (other != this) {
    fid_vec_.Swap(&other->fid_vec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata signal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = signal_descriptor_;
  metadata.reflection = signal_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string basis::_default_strbasispath_;
#ifndef _MSC_VER
const int basis::kStrbasispathFieldNumber;
const int basis::kVecsignalfilesFieldNumber;
const int basis::kSignalsFieldNumber;
const int basis::kBroadSigFieldNumber;
#endif  // !_MSC_VER

basis::basis()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void basis::InitAsDefaultInstance() {
}

basis::basis(const basis& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void basis::SharedCtor() {
  _cached_size_ = 0;
  strbasispath_ = const_cast< ::std::string*>(&_default_strbasispath_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

basis::~basis() {
  SharedDtor();
}

void basis::SharedDtor() {
  if (strbasispath_ != &_default_strbasispath_) {
    delete strbasispath_;
  }
  if (this != default_instance_) {
  }
}

void basis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* basis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return basis_descriptor_;
}

const basis& basis::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tarquin_2eproto();  return *default_instance_;
}

basis* basis::default_instance_ = NULL;

basis* basis::New() const {
  return new basis;
}

void basis::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (strbasispath_ != &_default_strbasispath_) {
        strbasispath_->clear();
      }
    }
  }
  vecsignalfiles_.Clear();
  signals_.Clear();
  broad_sig_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool basis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strbasispath = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strbasispath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strbasispath().data(), this->strbasispath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecsignalfiles;
        break;
      }
      
      // repeated string vecsignalfiles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecsignalfiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_vecsignalfiles()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vecsignalfiles(0).data(), this->vecsignalfiles(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecsignalfiles;
        if (input->ExpectTag(26)) goto parse_signals;
        break;
      }
      
      // repeated .sln.signal signals = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_signals;
        if (input->ExpectTag(32)) goto parse_broad_sig;
        break;
      }
      
      // repeated bool broad_sig = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_broad_sig:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 32, input, this->mutable_broad_sig())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_broad_sig())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_broad_sig;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void basis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string strbasispath = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strbasispath().data(), this->strbasispath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strbasispath(), output);
  }
  
  // repeated string vecsignalfiles = 2;
  for (int i = 0; i < this->vecsignalfiles_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->vecsignalfiles(i).data(), this->vecsignalfiles(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->vecsignalfiles(i), output);
  }
  
  // repeated .sln.signal signals = 3;
  for (int i = 0; i < this->signals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->signals(i), output);
  }
  
  // repeated bool broad_sig = 4;
  for (int i = 0; i < this->broad_sig_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      4, this->broad_sig(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* basis::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string strbasispath = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strbasispath().data(), this->strbasispath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strbasispath(), target);
  }
  
  // repeated string vecsignalfiles = 2;
  for (int i = 0; i < this->vecsignalfiles_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vecsignalfiles(i).data(), this->vecsignalfiles(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->vecsignalfiles(i), target);
  }
  
  // repeated .sln.signal signals = 3;
  for (int i = 0; i < this->signals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->signals(i), target);
  }
  
  // repeated bool broad_sig = 4;
  for (int i = 0; i < this->broad_sig_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(4, this->broad_sig(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int basis::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string strbasispath = 1;
    if (has_strbasispath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strbasispath());
    }
    
  }
  // repeated string vecsignalfiles = 2;
  total_size += 1 * this->vecsignalfiles_size();
  for (int i = 0; i < this->vecsignalfiles_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->vecsignalfiles(i));
  }
  
  // repeated .sln.signal signals = 3;
  total_size += 1 * this->signals_size();
  for (int i = 0; i < this->signals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signals(i));
  }
  
  // repeated bool broad_sig = 4;
  {
    int data_size = 0;
    data_size = 1 * this->broad_sig_size();
    total_size += 1 * this->broad_sig_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void basis::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const basis* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const basis*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void basis::MergeFrom(const basis& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecsignalfiles_.MergeFrom(from.vecsignalfiles_);
  signals_.MergeFrom(from.signals_);
  broad_sig_.MergeFrom(from.broad_sig_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_strbasispath(from.strbasispath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void basis::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void basis::CopyFrom(const basis& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool basis::IsInitialized() const {
  
  return true;
}

void basis::Swap(basis* other) {
  if (other != this) {
    std::swap(strbasispath_, other->strbasispath_);
    vecsignalfiles_.Swap(&other->vecsignalfiles_);
    signals_.Swap(&other->signals_);
    broad_sig_.Swap(&other->broad_sig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata basis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = basis_descriptor_;
  metadata.reflection = basis_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* options_fidformat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return options_fidformat_descriptor_;
}
bool options_fidformat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const options_fidformat options::DANGER;
const options_fidformat options::SIEMENS;
const options_fidformat options::PHILIPS;
const options_fidformat options::GE;
const options_fidformat options::RDA;
const options_fidformat options::LCM;
const options_fidformat options::SHF;
const options_fidformat options::VARIAN;
const options_fidformat options::BRUKER;
const options_fidformat options::DCM;
const options_fidformat options::PHILIPS_DCM;
const options_fidformat options::JMRUI_TXT;
const options_fidformat options::NOTSET;
const options_fidformat options::fidformat_MIN;
const options_fidformat options::fidformat_MAX;
const int options::fidformat_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string options::_default_strbasispath_;
const ::std::string options::_default_stroutputxmlpath_;
const ::std::string options::_default_strfile_;
const ::std::string options::_default_strfilewater_;
const ::std::string options::_default_strfileoutimag_;
const ::std::string options::_default_strfileouttxt_;
const ::std::string options::_default_strfileoutcsv_;
#ifndef _MSC_VER
const int options::kFormatFieldNumber;
const int options::kStrbasispathFieldNumber;
const int options::kBuseprecompiledFieldNumber;
const int options::kNstartFieldNumber;
const int options::kNendFieldNumber;
const int options::kPhi0LowerFieldNumber;
const int options::kPhi0UpperFieldNumber;
const int options::kPhi0TypFieldNumber;
const int options::kPhi1LowerFieldNumber;
const int options::kPhi1UpperFieldNumber;
const int options::kPhi1TypFieldNumber;
const int options::kConsFieldNumber;
const int options::kStroutputxmlpathFieldNumber;
const int options::kStrfileFieldNumber;
const int options::kStrfilewaterFieldNumber;
const int options::kStrfileoutimagFieldNumber;
const int options::kStrfileouttxtFieldNumber;
const int options::kStrfileoutcsvFieldNumber;
const int options::kConvWindowWidthFieldNumber;
const int options::kWaterWindowFieldNumber;
const int options::kBautophaseFieldNumber;
const int options::kBautorefFieldNumber;
const int options::kBShowPreprocessedFieldNumber;
const int options::kRefFieldNumber;
const int options::kRefSpecFieldNumber;
const int options::kFitListFieldNumber;
#endif  // !_MSC_VER

options::options()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void options::InitAsDefaultInstance() {
}

options::options(const options& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void options::SharedCtor() {
  _cached_size_ = 0;
  format_ = 0;
  strbasispath_ = const_cast< ::std::string*>(&_default_strbasispath_);
  buseprecompiled_ = false;
  nstart_ = 0;
  nend_ = 0;
  phi0_lower_ = 0;
  phi0_upper_ = 0;
  phi0_typ_ = 0;
  phi1_lower_ = 0;
  phi1_upper_ = 0;
  phi1_typ_ = 0;
  stroutputxmlpath_ = const_cast< ::std::string*>(&_default_stroutputxmlpath_);
  strfile_ = const_cast< ::std::string*>(&_default_strfile_);
  strfilewater_ = const_cast< ::std::string*>(&_default_strfilewater_);
  strfileoutimag_ = const_cast< ::std::string*>(&_default_strfileoutimag_);
  strfileouttxt_ = const_cast< ::std::string*>(&_default_strfileouttxt_);
  strfileoutcsv_ = const_cast< ::std::string*>(&_default_strfileoutcsv_);
  conv_window_width_ = 0;
  water_window_ = 0;
  bautophase_ = false;
  bautoref_ = false;
  bshowpreprocessed_ = false;
  ref_ = 0;
  ref_spec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

options::~options() {
  SharedDtor();
}

void options::SharedDtor() {
  if (strbasispath_ != &_default_strbasispath_) {
    delete strbasispath_;
  }
  if (stroutputxmlpath_ != &_default_stroutputxmlpath_) {
    delete stroutputxmlpath_;
  }
  if (strfile_ != &_default_strfile_) {
    delete strfile_;
  }
  if (strfilewater_ != &_default_strfilewater_) {
    delete strfilewater_;
  }
  if (strfileoutimag_ != &_default_strfileoutimag_) {
    delete strfileoutimag_;
  }
  if (strfileouttxt_ != &_default_strfileouttxt_) {
    delete strfileouttxt_;
  }
  if (strfileoutcsv_ != &_default_strfileoutcsv_) {
    delete strfileoutcsv_;
  }
  if (this != default_instance_) {
  }
}

void options::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* options::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return options_descriptor_;
}

const options& options::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tarquin_2eproto();  return *default_instance_;
}

options* options::default_instance_ = NULL;

options* options::New() const {
  return new options;
}

void options::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    format_ = 0;
    if (_has_bit(1)) {
      if (strbasispath_ != &_default_strbasispath_) {
        strbasispath_->clear();
      }
    }
    buseprecompiled_ = false;
    nstart_ = 0;
    nend_ = 0;
    phi0_lower_ = 0;
    phi0_upper_ = 0;
    phi0_typ_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    phi1_lower_ = 0;
    phi1_upper_ = 0;
    phi1_typ_ = 0;
    if (_has_bit(12)) {
      if (stroutputxmlpath_ != &_default_stroutputxmlpath_) {
        stroutputxmlpath_->clear();
      }
    }
    if (_has_bit(13)) {
      if (strfile_ != &_default_strfile_) {
        strfile_->clear();
      }
    }
    if (_has_bit(14)) {
      if (strfilewater_ != &_default_strfilewater_) {
        strfilewater_->clear();
      }
    }
    if (_has_bit(15)) {
      if (strfileoutimag_ != &_default_strfileoutimag_) {
        strfileoutimag_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (_has_bit(16)) {
      if (strfileouttxt_ != &_default_strfileouttxt_) {
        strfileouttxt_->clear();
      }
    }
    if (_has_bit(17)) {
      if (strfileoutcsv_ != &_default_strfileoutcsv_) {
        strfileoutcsv_->clear();
      }
    }
    conv_window_width_ = 0;
    water_window_ = 0;
    bautophase_ = false;
    bautoref_ = false;
    bshowpreprocessed_ = false;
    ref_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ref_spec_ = 0;
  }
  cons_.Clear();
  fit_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool options::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sln.options.fidformat format = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sln::options_fidformat_IsValid(value)) {
            set_format(static_cast< ::sln::options_fidformat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strbasispath;
        break;
      }
      
      // optional string strbasispath = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strbasispath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strbasispath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strbasispath().data(), this->strbasispath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buseprecompiled;
        break;
      }
      
      // optional bool buseprecompiled = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buseprecompiled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &buseprecompiled_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nstart;
        break;
      }
      
      // optional int32 nstart = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nstart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nstart_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nend;
        break;
      }
      
      // optional int32 nend = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nend_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_phi0_lower;
        break;
      }
      
      // optional double phi0_lower = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_phi0_lower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi0_lower_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_phi0_upper;
        break;
      }
      
      // optional double phi0_upper = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_phi0_upper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi0_upper_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_phi0_typ;
        break;
      }
      
      // optional double phi0_typ = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_phi0_typ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi0_typ_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_phi1_lower;
        break;
      }
      
      // optional double phi1_lower = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_phi1_lower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi1_lower_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_phi1_upper;
        break;
      }
      
      // optional double phi1_upper = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_phi1_upper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi1_upper_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_phi1_typ;
        break;
      }
      
      // optional double phi1_typ = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_phi1_typ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi1_typ_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_cons;
        break;
      }
      
      // repeated .sln.constraints cons = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_cons;
        if (input->ExpectTag(106)) goto parse_stroutputxmlpath;
        break;
      }
      
      // optional string stroutputxmlpath = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stroutputxmlpath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stroutputxmlpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stroutputxmlpath().data(), this->stroutputxmlpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_strfile;
        break;
      }
      
      // optional string strfile = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strfile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strfile().data(), this->strfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_strfilewater;
        break;
      }
      
      // optional string strfilewater = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strfilewater:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strfilewater()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strfilewater().data(), this->strfilewater().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_strfileoutimag;
        break;
      }
      
      // optional string strfileoutimag = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strfileoutimag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strfileoutimag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strfileoutimag().data(), this->strfileoutimag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_strfileouttxt;
        break;
      }
      
      // optional string strfileouttxt = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strfileouttxt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strfileouttxt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strfileouttxt().data(), this->strfileouttxt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_strfileoutcsv;
        break;
      }
      
      // optional string strfileoutcsv = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strfileoutcsv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strfileoutcsv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strfileoutcsv().data(), this->strfileoutcsv().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_conv_window_width;
        break;
      }
      
      // optional int32 conv_window_width = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conv_window_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conv_window_width_)));
          _set_bit(18);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_water_window;
        break;
      }
      
      // optional int32 water_window = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_water_window:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &water_window_)));
          _set_bit(19);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_bautophase;
        break;
      }
      
      // optional bool bautophase = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bautophase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bautophase_)));
          _set_bit(20);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_bautoref;
        break;
      }
      
      // optional bool bautoref = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bautoref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bautoref_)));
          _set_bit(21);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_bShowPreprocessed;
        break;
      }
      
      // optional bool bShowPreprocessed = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bShowPreprocessed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bshowpreprocessed_)));
          _set_bit(22);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_ref;
        break;
      }
      
      // optional double ref = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_)));
          _set_bit(23);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_ref_spec;
        break;
      }
      
      // optional double ref_spec = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ref_spec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_spec_)));
          _set_bit(24);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_fit_list;
        break;
      }
      
      // repeated .sln.coord fit_list = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fit_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fit_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_fit_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void options::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .sln.options.fidformat format = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->format(), output);
  }
  
  // optional string strbasispath = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strbasispath().data(), this->strbasispath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strbasispath(), output);
  }
  
  // optional bool buseprecompiled = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->buseprecompiled(), output);
  }
  
  // optional int32 nstart = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nstart(), output);
  }
  
  // optional int32 nend = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nend(), output);
  }
  
  // optional double phi0_lower = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->phi0_lower(), output);
  }
  
  // optional double phi0_upper = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->phi0_upper(), output);
  }
  
  // optional double phi0_typ = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->phi0_typ(), output);
  }
  
  // optional double phi1_lower = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->phi1_lower(), output);
  }
  
  // optional double phi1_upper = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->phi1_upper(), output);
  }
  
  // optional double phi1_typ = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->phi1_typ(), output);
  }
  
  // repeated .sln.constraints cons = 12;
  for (int i = 0; i < this->cons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->cons(i), output);
  }
  
  // optional string stroutputxmlpath = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stroutputxmlpath().data(), this->stroutputxmlpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->stroutputxmlpath(), output);
  }
  
  // optional string strfile = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strfile().data(), this->strfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->strfile(), output);
  }
  
  // optional string strfilewater = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strfilewater().data(), this->strfilewater().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->strfilewater(), output);
  }
  
  // optional string strfileoutimag = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strfileoutimag().data(), this->strfileoutimag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->strfileoutimag(), output);
  }
  
  // optional string strfileouttxt = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strfileouttxt().data(), this->strfileouttxt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->strfileouttxt(), output);
  }
  
  // optional string strfileoutcsv = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strfileoutcsv().data(), this->strfileoutcsv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->strfileoutcsv(), output);
  }
  
  // optional int32 conv_window_width = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->conv_window_width(), output);
  }
  
  // optional int32 water_window = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->water_window(), output);
  }
  
  // optional bool bautophase = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->bautophase(), output);
  }
  
  // optional bool bautoref = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->bautoref(), output);
  }
  
  // optional bool bShowPreprocessed = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->bshowpreprocessed(), output);
  }
  
  // optional double ref = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->ref(), output);
  }
  
  // optional double ref_spec = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->ref_spec(), output);
  }
  
  // repeated .sln.coord fit_list = 26;
  for (int i = 0; i < this->fit_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->fit_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* options::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .sln.options.fidformat format = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->format(), target);
  }
  
  // optional string strbasispath = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strbasispath().data(), this->strbasispath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strbasispath(), target);
  }
  
  // optional bool buseprecompiled = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->buseprecompiled(), target);
  }
  
  // optional int32 nstart = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nstart(), target);
  }
  
  // optional int32 nend = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nend(), target);
  }
  
  // optional double phi0_lower = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->phi0_lower(), target);
  }
  
  // optional double phi0_upper = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->phi0_upper(), target);
  }
  
  // optional double phi0_typ = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->phi0_typ(), target);
  }
  
  // optional double phi1_lower = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->phi1_lower(), target);
  }
  
  // optional double phi1_upper = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->phi1_upper(), target);
  }
  
  // optional double phi1_typ = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->phi1_typ(), target);
  }
  
  // repeated .sln.constraints cons = 12;
  for (int i = 0; i < this->cons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->cons(i), target);
  }
  
  // optional string stroutputxmlpath = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stroutputxmlpath().data(), this->stroutputxmlpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->stroutputxmlpath(), target);
  }
  
  // optional string strfile = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strfile().data(), this->strfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->strfile(), target);
  }
  
  // optional string strfilewater = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strfilewater().data(), this->strfilewater().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->strfilewater(), target);
  }
  
  // optional string strfileoutimag = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strfileoutimag().data(), this->strfileoutimag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->strfileoutimag(), target);
  }
  
  // optional string strfileouttxt = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strfileouttxt().data(), this->strfileouttxt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->strfileouttxt(), target);
  }
  
  // optional string strfileoutcsv = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strfileoutcsv().data(), this->strfileoutcsv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->strfileoutcsv(), target);
  }
  
  // optional int32 conv_window_width = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->conv_window_width(), target);
  }
  
  // optional int32 water_window = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->water_window(), target);
  }
  
  // optional bool bautophase = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->bautophase(), target);
  }
  
  // optional bool bautoref = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->bautoref(), target);
  }
  
  // optional bool bShowPreprocessed = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->bshowpreprocessed(), target);
  }
  
  // optional double ref = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->ref(), target);
  }
  
  // optional double ref_spec = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->ref_spec(), target);
  }
  
  // repeated .sln.coord fit_list = 26;
  for (int i = 0; i < this->fit_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->fit_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int options::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .sln.options.fidformat format = 1;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }
    
    // optional string strbasispath = 2;
    if (has_strbasispath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strbasispath());
    }
    
    // optional bool buseprecompiled = 3;
    if (has_buseprecompiled()) {
      total_size += 1 + 1;
    }
    
    // optional int32 nstart = 4;
    if (has_nstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nstart());
    }
    
    // optional int32 nend = 5;
    if (has_nend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nend());
    }
    
    // optional double phi0_lower = 6;
    if (has_phi0_lower()) {
      total_size += 1 + 8;
    }
    
    // optional double phi0_upper = 7;
    if (has_phi0_upper()) {
      total_size += 1 + 8;
    }
    
    // optional double phi0_typ = 8;
    if (has_phi0_typ()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double phi1_lower = 9;
    if (has_phi1_lower()) {
      total_size += 1 + 8;
    }
    
    // optional double phi1_upper = 10;
    if (has_phi1_upper()) {
      total_size += 1 + 8;
    }
    
    // optional double phi1_typ = 11;
    if (has_phi1_typ()) {
      total_size += 1 + 8;
    }
    
    // optional string stroutputxmlpath = 13;
    if (has_stroutputxmlpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stroutputxmlpath());
    }
    
    // optional string strfile = 14;
    if (has_strfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strfile());
    }
    
    // optional string strfilewater = 15;
    if (has_strfilewater()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strfilewater());
    }
    
    // optional string strfileoutimag = 16;
    if (has_strfileoutimag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strfileoutimag());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string strfileouttxt = 17;
    if (has_strfileouttxt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strfileouttxt());
    }
    
    // optional string strfileoutcsv = 18;
    if (has_strfileoutcsv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strfileoutcsv());
    }
    
    // optional int32 conv_window_width = 19;
    if (has_conv_window_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conv_window_width());
    }
    
    // optional int32 water_window = 20;
    if (has_water_window()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->water_window());
    }
    
    // optional bool bautophase = 21;
    if (has_bautophase()) {
      total_size += 2 + 1;
    }
    
    // optional bool bautoref = 22;
    if (has_bautoref()) {
      total_size += 2 + 1;
    }
    
    // optional bool bShowPreprocessed = 23;
    if (has_bshowpreprocessed()) {
      total_size += 2 + 1;
    }
    
    // optional double ref = 24;
    if (has_ref()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional double ref_spec = 25;
    if (has_ref_spec()) {
      total_size += 2 + 8;
    }
    
  }
  // repeated .sln.constraints cons = 12;
  total_size += 1 * this->cons_size();
  for (int i = 0; i < this->cons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cons(i));
  }
  
  // repeated .sln.coord fit_list = 26;
  total_size += 2 * this->fit_list_size();
  for (int i = 0; i < this->fit_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fit_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void options::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const options* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const options*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void options::MergeFrom(const options& from) {
  GOOGLE_CHECK_NE(&from, this);
  cons_.MergeFrom(from.cons_);
  fit_list_.MergeFrom(from.fit_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_format(from.format());
    }
    if (from._has_bit(1)) {
      set_strbasispath(from.strbasispath());
    }
    if (from._has_bit(2)) {
      set_buseprecompiled(from.buseprecompiled());
    }
    if (from._has_bit(3)) {
      set_nstart(from.nstart());
    }
    if (from._has_bit(4)) {
      set_nend(from.nend());
    }
    if (from._has_bit(5)) {
      set_phi0_lower(from.phi0_lower());
    }
    if (from._has_bit(6)) {
      set_phi0_upper(from.phi0_upper());
    }
    if (from._has_bit(7)) {
      set_phi0_typ(from.phi0_typ());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_phi1_lower(from.phi1_lower());
    }
    if (from._has_bit(9)) {
      set_phi1_upper(from.phi1_upper());
    }
    if (from._has_bit(10)) {
      set_phi1_typ(from.phi1_typ());
    }
    if (from._has_bit(12)) {
      set_stroutputxmlpath(from.stroutputxmlpath());
    }
    if (from._has_bit(13)) {
      set_strfile(from.strfile());
    }
    if (from._has_bit(14)) {
      set_strfilewater(from.strfilewater());
    }
    if (from._has_bit(15)) {
      set_strfileoutimag(from.strfileoutimag());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_strfileouttxt(from.strfileouttxt());
    }
    if (from._has_bit(17)) {
      set_strfileoutcsv(from.strfileoutcsv());
    }
    if (from._has_bit(18)) {
      set_conv_window_width(from.conv_window_width());
    }
    if (from._has_bit(19)) {
      set_water_window(from.water_window());
    }
    if (from._has_bit(20)) {
      set_bautophase(from.bautophase());
    }
    if (from._has_bit(21)) {
      set_bautoref(from.bautoref());
    }
    if (from._has_bit(22)) {
      set_bshowpreprocessed(from.bshowpreprocessed());
    }
    if (from._has_bit(23)) {
      set_ref(from.ref());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_ref_spec(from.ref_spec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void options::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void options::CopyFrom(const options& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool options::IsInitialized() const {
  
  return true;
}

void options::Swap(options* other) {
  if (other != this) {
    std::swap(format_, other->format_);
    std::swap(strbasispath_, other->strbasispath_);
    std::swap(buseprecompiled_, other->buseprecompiled_);
    std::swap(nstart_, other->nstart_);
    std::swap(nend_, other->nend_);
    std::swap(phi0_lower_, other->phi0_lower_);
    std::swap(phi0_upper_, other->phi0_upper_);
    std::swap(phi0_typ_, other->phi0_typ_);
    std::swap(phi1_lower_, other->phi1_lower_);
    std::swap(phi1_upper_, other->phi1_upper_);
    std::swap(phi1_typ_, other->phi1_typ_);
    cons_.Swap(&other->cons_);
    std::swap(stroutputxmlpath_, other->stroutputxmlpath_);
    std::swap(strfile_, other->strfile_);
    std::swap(strfilewater_, other->strfilewater_);
    std::swap(strfileoutimag_, other->strfileoutimag_);
    std::swap(strfileouttxt_, other->strfileouttxt_);
    std::swap(strfileoutcsv_, other->strfileoutcsv_);
    std::swap(conv_window_width_, other->conv_window_width_);
    std::swap(water_window_, other->water_window_);
    std::swap(bautophase_, other->bautophase_);
    std::swap(bautoref_, other->bautoref_);
    std::swap(bshowpreprocessed_, other->bshowpreprocessed_);
    std::swap(ref_, other->ref_);
    std::swap(ref_spec_, other->ref_spec_);
    fit_list_.Swap(&other->fit_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata options::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = options_descriptor_;
  metadata.reflection = options_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int constraints::kMinalphaFieldNumber;
const int constraints::kMaxalphaFieldNumber;
const int constraints::kTypalphaFieldNumber;
const int constraints::kMinbetaFieldNumber;
const int constraints::kMaxbetaFieldNumber;
const int constraints::kTypbetaFieldNumber;
const int constraints::kMinshifthzFieldNumber;
const int constraints::kMaxshifthzFieldNumber;
const int constraints::kTypshifthzFieldNumber;
#endif  // !_MSC_VER

constraints::constraints()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void constraints::InitAsDefaultInstance() {
}

constraints::constraints(const constraints& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void constraints::SharedCtor() {
  _cached_size_ = 0;
  minalpha_ = 0;
  maxalpha_ = 0;
  typalpha_ = 0;
  minbeta_ = 0;
  maxbeta_ = 0;
  typbeta_ = 0;
  minshifthz_ = 0;
  maxshifthz_ = 0;
  typshifthz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

constraints::~constraints() {
  SharedDtor();
}

void constraints::SharedDtor() {
  if (this != default_instance_) {
  }
}

void constraints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* constraints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return constraints_descriptor_;
}

const constraints& constraints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tarquin_2eproto();  return *default_instance_;
}

constraints* constraints::default_instance_ = NULL;

constraints* constraints::New() const {
  return new constraints;
}

void constraints::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    minalpha_ = 0;
    maxalpha_ = 0;
    typalpha_ = 0;
    minbeta_ = 0;
    maxbeta_ = 0;
    typbeta_ = 0;
    minshifthz_ = 0;
    maxshifthz_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    typshifthz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool constraints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double minalpha = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minalpha_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_maxalpha;
        break;
      }
      
      // optional double maxalpha = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxalpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxalpha_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_typalpha;
        break;
      }
      
      // optional double typalpha = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_typalpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &typalpha_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_minbeta;
        break;
      }
      
      // optional double minbeta = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minbeta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minbeta_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_maxbeta;
        break;
      }
      
      // optional double maxbeta = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxbeta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxbeta_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_typbeta;
        break;
      }
      
      // optional double typbeta = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_typbeta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &typbeta_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_minshifthz;
        break;
      }
      
      // optional double minshifthz = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minshifthz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minshifthz_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_maxshifthz;
        break;
      }
      
      // optional double maxshifthz = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxshifthz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxshifthz_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_typshifthz;
        break;
      }
      
      // optional double typshifthz = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_typshifthz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &typshifthz_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void constraints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double minalpha = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->minalpha(), output);
  }
  
  // optional double maxalpha = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->maxalpha(), output);
  }
  
  // optional double typalpha = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->typalpha(), output);
  }
  
  // optional double minbeta = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->minbeta(), output);
  }
  
  // optional double maxbeta = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->maxbeta(), output);
  }
  
  // optional double typbeta = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->typbeta(), output);
  }
  
  // optional double minshifthz = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->minshifthz(), output);
  }
  
  // optional double maxshifthz = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->maxshifthz(), output);
  }
  
  // optional double typshifthz = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->typshifthz(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* constraints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double minalpha = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->minalpha(), target);
  }
  
  // optional double maxalpha = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->maxalpha(), target);
  }
  
  // optional double typalpha = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->typalpha(), target);
  }
  
  // optional double minbeta = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->minbeta(), target);
  }
  
  // optional double maxbeta = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->maxbeta(), target);
  }
  
  // optional double typbeta = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->typbeta(), target);
  }
  
  // optional double minshifthz = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->minshifthz(), target);
  }
  
  // optional double maxshifthz = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->maxshifthz(), target);
  }
  
  // optional double typshifthz = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->typshifthz(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int constraints::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double minalpha = 1;
    if (has_minalpha()) {
      total_size += 1 + 8;
    }
    
    // optional double maxalpha = 2;
    if (has_maxalpha()) {
      total_size += 1 + 8;
    }
    
    // optional double typalpha = 3;
    if (has_typalpha()) {
      total_size += 1 + 8;
    }
    
    // optional double minbeta = 4;
    if (has_minbeta()) {
      total_size += 1 + 8;
    }
    
    // optional double maxbeta = 5;
    if (has_maxbeta()) {
      total_size += 1 + 8;
    }
    
    // optional double typbeta = 6;
    if (has_typbeta()) {
      total_size += 1 + 8;
    }
    
    // optional double minshifthz = 7;
    if (has_minshifthz()) {
      total_size += 1 + 8;
    }
    
    // optional double maxshifthz = 8;
    if (has_maxshifthz()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double typshifthz = 9;
    if (has_typshifthz()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void constraints::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const constraints* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const constraints*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void constraints::MergeFrom(const constraints& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_minalpha(from.minalpha());
    }
    if (from._has_bit(1)) {
      set_maxalpha(from.maxalpha());
    }
    if (from._has_bit(2)) {
      set_typalpha(from.typalpha());
    }
    if (from._has_bit(3)) {
      set_minbeta(from.minbeta());
    }
    if (from._has_bit(4)) {
      set_maxbeta(from.maxbeta());
    }
    if (from._has_bit(5)) {
      set_typbeta(from.typbeta());
    }
    if (from._has_bit(6)) {
      set_minshifthz(from.minshifthz());
    }
    if (from._has_bit(7)) {
      set_maxshifthz(from.maxshifthz());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_typshifthz(from.typshifthz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void constraints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void constraints::CopyFrom(const constraints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool constraints::IsInitialized() const {
  
  return true;
}

void constraints::Swap(constraints* other) {
  if (other != this) {
    std::swap(minalpha_, other->minalpha_);
    std::swap(maxalpha_, other->maxalpha_);
    std::swap(typalpha_, other->typalpha_);
    std::swap(minbeta_, other->minbeta_);
    std::swap(maxbeta_, other->maxbeta_);
    std::swap(typbeta_, other->typbeta_);
    std::swap(minshifthz_, other->minshifthz_);
    std::swap(maxshifthz_, other->maxshifthz_);
    std::swap(typshifthz_, other->typshifthz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata constraints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = constraints_descriptor_;
  metadata.reflection = constraints_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sln

// @@protoc_insertion_point(global_scope)
